// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (title, content, user_id)
VALUES ($1, $2, $3)
RETURNING id, title, content, user_id, created_at, updated_at
`

type CreatePostParams struct {
	Title   string
	Content string
	UserID  int32
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost, arg.Title, arg.Content, arg.UserID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
        email,
        password,
        user_name,
        gender
    )
VALUES ($1, $2, $3, $4)
RETURNING id, email, password, created_at, updated_at, user_name, gender
`

type CreateUserParams struct {
	Email    string
	Password string
	UserName string
	Gender   pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.UserName,
		arg.Gender,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.Gender,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
    AND user_id = $2
`

type DeletePostParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) DeletePost(ctx context.Context, arg DeletePostParams) error {
	_, err := q.db.Exec(ctx, deletePost, arg.ID, arg.UserID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getPostByID = `-- name: GetPostByID :one
SELECT p.id, p.title, p.content, p.user_id, p.created_at, p.updated_at,
    u.user_name,
    u.email
FROM posts p
    JOIN users u ON u.id = p.user_id
WHERE p.id = $1
LIMIT 1
`

type GetPostByIDRow struct {
	ID        int32
	Title     string
	Content   string
	UserID    int32
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	UserName  string
	Email     string
}

func (q *Queries) GetPostByID(ctx context.Context, id int32) (GetPostByIDRow, error) {
	row := q.db.QueryRow(ctx, getPostByID, id)
	var i GetPostByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.Email,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, created_at, updated_at, user_name, gender
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.Gender,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password, created_at, updated_at, user_name, gender
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.Gender,
	)
	return i, err
}

const listAllUsers = `-- name: ListAllUsers :many
SELECT id, email, password, created_at, updated_at, user_name, gender
FROM users
ORDER BY created_at DESC
`

func (q *Queries) ListAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
			&i.Gender,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPosts = `-- name: ListPosts :many
SELECT p.id, p.title, p.content, p.user_id, p.created_at, p.updated_at,
    u.user_name,
    u.email
FROM posts p
    JOIN users u ON u.id = p.user_id
ORDER BY p.created_at DESC
LIMIT $1 OFFSET $2
`

type ListPostsParams struct {
	Limit  int32
	Offset int32
}

type ListPostsRow struct {
	ID        int32
	Title     string
	Content   string
	UserID    int32
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	UserName  string
	Email     string
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]ListPostsRow, error) {
	rows, err := q.db.Query(ctx, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPostsRow
	for rows.Next() {
		var i ListPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserPosts = `-- name: ListUserPosts :many
SELECT p.id, p.title, p.content, p.user_id, p.created_at, p.updated_at,
    u.user_name,
    u.email
FROM posts p
    JOIN users u ON u.id = p.user_id
WHERE p.user_id = $1
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type ListUserPostsParams struct {
	UserID int32
	Limit  int32
	Offset int32
}

type ListUserPostsRow struct {
	ID        int32
	Title     string
	Content   string
	UserID    int32
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	UserName  string
	Email     string
}

func (q *Queries) ListUserPosts(ctx context.Context, arg ListUserPostsParams) ([]ListUserPostsRow, error) {
	rows, err := q.db.Query(ctx, listUserPosts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserPostsRow
	for rows.Next() {
		var i ListUserPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password, created_at, updated_at, user_name, gender
FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
			&i.Gender,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPosts = `-- name: SearchPosts :many
SELECT p.id, p.title, p.content, p.user_id, p.created_at, p.updated_at,
    u.user_name,
    u.email
FROM posts p
    JOIN users u ON u.id = p.user_id
WHERE p.title ILIKE '%' || $1 || '%'
    OR p.content ILIKE '%' || $1 || '%'
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type SearchPostsParams struct {
	Column1 pgtype.Text
	Limit   int32
	Offset  int32
}

type SearchPostsRow struct {
	ID        int32
	Title     string
	Content   string
	UserID    int32
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	UserName  string
	Email     string
}

func (q *Queries) SearchPosts(ctx context.Context, arg SearchPostsParams) ([]SearchPostsRow, error) {
	rows, err := q.db.Query(ctx, searchPosts, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchPostsRow
	for rows.Next() {
		var i SearchPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET title = COALESCE($1, title),
    content = COALESCE($2, content),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $3
    AND user_id = $4
RETURNING id, title, content, user_id, created_at, updated_at
`

type UpdatePostParams struct {
	Title   pgtype.Text
	Content pgtype.Text
	ID      int32
	UserID  int32
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.Title,
		arg.Content,
		arg.ID,
		arg.UserID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = COALESCE($1, email),
    user_name = COALESCE($2, user_name),
    gender = COALESCE($3, gender),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $4
RETURNING id, email, password, created_at, updated_at, user_name, gender
`

type UpdateUserParams struct {
	Email    pgtype.Text
	UserName pgtype.Text
	Gender   pgtype.Text
	ID       int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.UserName,
		arg.Gender,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.Gender,
	)
	return i, err
}
